Script started on 2020ÎÖÑ 11Ïõî 23Ïùº (Ïõî) Ïò§Ï†Ñ 11Ïãú 27Î∂Ñ 53Ï¥à
[?1034hnetpa15@~/ 997$ ls -l prog/tcp_chat*prog/tcp_chatcli 127.0.0.1 5015 c15[11Pcat prog/tcp_chatserv1.c[1Ptalkcli1.cprog/tcp_chatcli 127.0.0.1 5015 c15[12Pcat prog/tcp_talkcli1.cchatserv1.c[1Ptalkcli1.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#define MAXLINE 511
#define NAME_LEN 20

char *EXIT_STRING ="exit";
char bufall[MAXLINE+NAME_LEN],*bufmsg;
int maxfdp1,socket_id,namelen;


int main(int argc, char *argv[]){
pid_t pid;
static int s;
static struct sockaddr_in servaddr;

if (argc !=4){
printf("ÏÇ¨Ïö©Î≤ï: %s serv_ip port \n",argv[0]);
exit(0);
}

sprintf(bufall,"[%s] : ", argv[3]);
namelen=strlen(bufall);
bufmsg=bufall+namelen;


if((s=socket(PF_INET,SOCK_STREAM,0))<0){
printf("client:can'topen stream socket.\n");
exit(0);
}

bzero((char*)&servaddr,sizeof(servaddr));
servaddr.sin_family=AF_INET;
inet_pton(AF_INET, argv[1],&servaddr.sin_addr);
servaddr.sin_port = htons(atoi(argv[2]));

if(connect(s,(struct sockaddr *)&servaddr,sizeof(servaddr)) < 0) {
 printf("Client:can't connetc to server.\n");
 exit(0);
}

if( (pid=fork())>0)
 input_and_send(s);
else if(pid==0)
 recv_and_print(s);
 close(s);
 return 0;
}

int input_and_send(int sd){
 char buf[MAXLINE+1];
 int nbyte;
 while(fgets(bufmsg,MAXLINE,stdin) !=NULL) {
  nbyte=namelen+strlen(bufall);
  write(sd,bufall,nbyte);
 if(strstr(bufmsg,EXIT_STRING) !=NULL){
 puts("Good Bye");
 close(sd);
 exit(0);
}
}
return 0;
}

int recv_and_print(int sd) {
 char buf[MAXLINE+1];
 int nbyte;
 while(1){
 if( (nbyte=read(sd,bufmsg,MAXLINE))<0){
 perror("read fail");
 close(sd);
 exit(0);
}
bufmsg[nbyte]=0;
printf("%s",bufmsg);
if(strstr(bufmsg, EXIT_STRING) !=NULL ) {
puts("Good bye");
exit(0);
}

}
return 0;
}
netpa15@~/ 998$ cat prog/tcp_talkcli1.c[3Pls -l prog/tcp_chat*prog/tcp_chatcli 127.0.0.1 5015 c15[11Pcat prog/tcp_chatserv1.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <fcntl.h>
#include <sys/file.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>


#define MAXLINE 511
#define MAX_SOCK 1024

char *EXIT_STRING = "exit";
char *START_STRING = "Connected to chat_server \n";
int maxfdp1; 
int num_chat = 0;
int clisock_list[MAX_SOCK]; 
int listen_sock; 

void addClient(int s, struct sockaddr_in *newcliaddr);
int getmax(); 
void removeClient(int s); 
int tcp_listen(int host, int port, int backlog);
void errquit(char *msg) { perror(msg); exit(1); }

int main(int argc, char *argv[]) {
        struct sockaddr_in cliaddr;
        int i, j, nbyte, accp_sock, addrlen=sizeof(struct sockaddr_in);
        char buf[MAXLINE+1];
        fd_set read_fds; 

        if(argc != 2) {
                printf("Usage : %s port\n", argv[0]);
                exit(0);
        }

        listen_sock = tcp_listen(INADDR_ANY, atoi(argv[1]), 5);
       maxfdp1=listen_sock+1; 
while(1){
                FD_ZERO(&read_fds);
                FD_SET(listen_sock, &read_fds);
                for(i=0; i < num_chat; i++)
                        FD_SET(clisock_list[i], &read_fds); 

                puts("ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î•º Í∏∞Îã§Î¶º..");
                if(select(maxfdp1, &read_fds, NULL, NULL, NULL)<0)
                        errquit("select fail");
                
                if(FD_ISSET(listen_sock, &read_fds)) {
                        accp_sock = accept(listen_sock, (struct sockaddr *)&cliaddr,                                                                                          &addrlen);
                        if(accp_sock == -1)
                                errquit("accept fail");
                        addClient(accp_sock, &cliaddr);
                        send(accp_sock, START_STRING, strlen(START_STRING), 0);
                        printf("%d Î≤àÏß∏ ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä\n", num_chat);
                }

                for(i=0; i < num_chat; i++) {
                        if(FD_ISSET(clisock_list[i], &read_fds)) {
                                nbyte = recv(clisock_list[i], buf, MAXLINE, 0);
                                if(nbyte<=0) {
                                        removeClient(i);
                                        continue;
                                }
                                buf[nbyte] = 0;
                                if(strstr(buf, EXIT_STRING) != NULL) {
                                        removeClient(i);
                                        continue;
                                }
                                for(j=0; j <num_chat; j++){
if(i!=j)
send(clisock_list[j], buf, nbyte, 0);
}
                                printf("%s\n", buf);
                        }
                }
        }
        return 0;
}

void addClient(int s, struct sockaddr_in *newcliaddr) {
        char buf[20];

        inet_ntop(AF_INET, &newcliaddr->sin_addr, buf, sizeof(buf));
        printf("new client : %s\n", buf);
        clisock_list[num_chat] = s;
        num_chat++;
maxfdp1=getmax()+1;
}

void removeClient(int s) {
        close(clisock_list[s]);
        if(s != num_chat-1)
                clisock_list[s] = clisock_list[num_chat-1];
        num_chat--;
        printf("Ï∞∏Í∞ÄÏûê 1Î™Ö ÌÉàÌá¥. ÌòÑÏû¨ Ï∞∏Í∞ÄÏûê Ïàò = %d\n", num_chat);
maxfdp1=getmax()+1;
}

int getmax() {
        int max = listen_sock;
        int i;
        for (i=0; i < num_chat; i++)
                if(clisock_list[i] > max)
                        max = clisock_list[i];
        return max;
}

int tcp_listen(int host, int port, int backlog) {
        int sd;
        struct sockaddr_in servaddr;

        sd = socket(AF_INET, SOCK_STREAM, 0);
        if(sd == 1) {
                perror("socket fail");
                exit(1);
        }

        bzero((char *)&servaddr, sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = htonl(host);
        servaddr.sin_port = htons(port);

        if(bind(sd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
                perror("bind fail");
                exit(1);
        }

        listen(sd, backlog);
        return sd;
}
netpa15@~/ 999$ cat prog/tcp_chatserv1.c[1Ptalkcli1.c[3Pls -l prog/tcp_chat*prog/tcp_chatcli 127.0.0.1 5015 c15[11Pcat prog/tcp_chatserv1.cprog/tcp_chatcli 127.0.0.1 5015 c15[C[C[C[C[C[C
ÏÑúÎ≤ÑÏóê Ï†ëÏÜçÎêòÏóàÏäµÎãàÎã§.
Connected to chat_server 
 
[b15] : netpa15
 
OK receive
[b15] : OK confirm
 
exit
Good bye
netpa15@~/ 1000$ ls -l prog/tcp_chat*
-rwxr-xr-x. 1 netpa15 student 13552 11Ïõî 22 23:30 prog/tcp_chatcli
-rw-r--r--. 1 netpa15 student  2627 11Ïõî 22 23:30 prog/tcp_chatcli.c
-rwxr-xr-x. 1 netpa15 student 13872 11Ïõî 23 01:31 prog/tcp_chatserv
-rw-r--r--. 1 netpa15 student  4235 11Ïõî 22 23:29 prog/tcp_chatserv.c
-rwxr-xr-x. 1 netpa15 student 13864 11Ïõî 23 11:26 prog/tcp_chatserv1
-rw-r--r--. 1 netpa15 student  4232 11Ïõî 23 11:26 prog/tcp_chatserv1.c
netpa15@~/ 1001$ exit

Script done on 2020ÎÖÑ 11Ïõî 23Ïùº (Ïõî) Ïò§Ï†Ñ 11Ïãú 29Î∂Ñ 31Ï¥à
